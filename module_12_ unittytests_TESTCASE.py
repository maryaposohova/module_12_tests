import unittest

# –º–µ—Ç–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å test_ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ—Å—Ç


class MathTest(unittest.TestCase):
    def test_addition(self):  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Ç–µ—Å—Ç
        self.assertEqual(1 + 1, 2)

    def test_subtraction(self):  # –ò —ç—Ç–æ—Ç —Ç–æ–∂–µ
        self.assertEqual(5 - 3, 2)

    def helper_method(self):  # –ê —ç—Ç–æ—Ç ‚Äî –Ω–µ—Ç (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å test_)
        pass


"""
üîπ –ú–µ—Ç–æ–¥—ã setUp() –∏ tearDown()
setUp() ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö).

tearDown() ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ (–æ—á–∏—Å—Ç–∫–∞).
"""


def connect_to_database():
    pass


class DatabaseTest(unittest.TestCase):
    def setUp(self):
        self.db = connect_to_database()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º

    def tearDown(self):
        self.db.close()  # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞

    def test_query(self):
        result = self.db.query("SELECT 1")
        self.assertEqual(result, 1)


"""
üîπ –ú–µ—Ç–æ–¥—ã setUpClass() –∏ tearDownClass()
setUpClass() ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –≤ –∫–ª–∞—Å—Å–µ.

tearDownClass() ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.
"""


def initialize_expensive_resource():
    pass


class ExpensiveSetupTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.shared_resource = initialize_expensive_resource()  # 1 —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏

    @classmethod
    def tearDownClass(cls):
        cls.shared_resource.release()  # 1 —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤

    def test_feature1(self):
        self.assertTrue(self.shared_resource.is_ready())

    def test_feature2(self):
        self.assertEqual(self.shared_resource.get_value(), 42)


'''
–û—Å–Ω–æ–≤–Ω—ã–µ Assert-–º–µ—Ç–æ–¥—ã
TestCase –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫:

–ú–µ—Ç–æ–¥	–ü—Ä–æ–≤–µ—Ä—è–µ—Ç	–ü—Ä–∏–º–µ—Ä
assertEqual(a, b)	a == b	self.assertEqual(2+2, 4)
assertNotEqual(a, b)	a != b	self.assertNotEqual(1, 2)
assertTrue(x)	bool(x) is True	self.assertTrue(5 < 10)
assertFalse(x)	bool(x) is False	self.assertFalse(10 < 5)
assertIs(a, b)	a is b	self.assertIs(x, None)
assertIsNone(x)	x is None	self.assertIsNone(result)
assertIn(a, b)	a in b	self.assertIn(3, [1, 2, 3])
assertRaises(Error, func, *args)	func(*args) –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É	self.assertRaises(ValueError, int, "abc")
'''

'''–ö–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã?'''
'''–°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ unittest.main()'''

if __name__ == "__main__":
    unittest.main()  # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ

'''–°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É'''
# python -m unittest test_file.py  # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
# python -m unittest discover     # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ

''' –ó–∞—á–µ–º –≤–æ–æ–±—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TestCase?'''
# –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å ‚Äî —Ç–µ—Å—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –≤ –∫–ª–∞—Å—Å—ã.
# –ì–∏–±–∫–æ—Å—Ç—å ‚Äî –µ—Å—Ç—å setUp/tearDown –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
# –ú–Ω–æ–≥–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (assertEqual, assertRaises –∏ –¥—Ä.).
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD (–Ω–∞–ø—Ä–∏–º–µ—Ä, GitHub Actions, Jenkins).

'''
–í—ã–≤–æ–¥
unittest.TestCase ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Python. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç:

- –ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã –≤ –≤–∏–¥–µ –º–µ—Ç–æ–¥–æ–≤ test_*,

- –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å setUp/tearDown –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º,

- –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–µ assert-–ø—Ä–æ–≤–µ—Ä–∫–∏.

–ï—Å–ª–∏ –ø–∏—à–µ—à—å —Ç–µ—Å—Ç—ã –Ω–∞ Python ‚Äî unittest.TestCase –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∫ –∏–∑—É—á–µ–Ω–∏—é! üöÄ
'''